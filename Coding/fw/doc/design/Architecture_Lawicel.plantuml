@startuml

Title Application Diagram

Class Application

package Lawicel_Library <<Folder>>{
    Class Lawicel{
        +static const uint16_t MAX_TIMESTAMP
        +static const String X_VERSION
        +static const String X_SERIAL_NUMBER
        +static const char CR
        +static const char BELL
        +static const uint8_t MAX_COMMAND_LENGTH
        +Lawicel(SerialInterface &serialInt, CANInterface &canInt, NVMInterface &nvmInt)
        +~Lawicel()
        +bool executeCycle()
        +bool begin()
        +bool end()
        -enum ASCII_COMMANDS
        -bool charToByte(char msb, char lsb, uint8_t &result)
        -bool charToInt(char symbol, uint8_t &result)
        -bool decodeId(bool extended, const String &lawicelCMD, uint32_t &result)
        -bool receiveCommand(const String &lawicelCMD)
        -bool ...Cmd(const String &lawicelCMD)
        -bool autopoll()
        -String getFormattedTimestamp()
        -bool m_timestamp
        -bool m_autoPolling
        -String m_serialInput
        -String m_serialReturn
        -uint8_t m_autoStart
        -SerialInterface *m_selectedSerial
        -CANInterface *m_selectedCAN
        -NVMInterface *m_selectedNVM
        -Lawicel()
        -Lawicel(const Lawicel &prot)
        -Lawicel &operator=(const Lawicel &prot)
    }

    note left  of Lawicel::...Cmd
    Each individual Lawicel Command
    is processed on a different method.
    Example:
    bool setBaudrateCmd(const String &lawicelCMD);
    end note

    Application *.. Lawicel

    Interface SerialInterface{
        +SerialInterface()
        +virtual ~SerialInterface()
        +virtual bool begin() = 0
        +virtual bool end() = 0
        +virtual bool setBaudrate(uint32_t baudrate) = 0
        +virtual bool read(char &c) = 0
        +virtual void print(const String &string) = 0
        +virtual void print(uint32_t num) = 0
        +virtual void print(char c) = 0
    }

    Interface CANInterface {
        +static const uint8_t FRAME_DATA_SIZE = 8
        +static const uint8_t FILTER_DATA_SIZE = 4
        +enum BUS_STATE
        +struct Frame
        +struct Filter
        +enum FILTER_MODE
        +CANInterface()
        +virtual ~CANInterface()
        +virtual bool begin() = 0
        +virtual bool end() = 0
        +virtual bool send(const Frame &frame) = 0
        +virtual bool setState(BUS_STATE state) = 0
        +virtual bool setBaudrate(uint32_t baudrate) = 0
        +virtual bool setBTR(uint8_t btr0, uint8_t btr1) = 0
        +virtual bool setFilterMode(FILTER_MODE filter) = 0
        +virtual bool setACn(const Filter &acn) = 0
        +virtual bool setAMn(const Filter &acn) = 0
        +virtual BUS_STATE getChannelState() = 0
        +virtual uint8_t getStatusFlags() = 0
        +virtual bool pollSingle(Frame &frame) = 0
    }

    Interface NVMInterface{
        +const String INIT_SERIAL_BAUD = "SerialBaud"
        +const String INIT_TIMESTAMP = "ToggleTime"
        +const String INIT_AUTO_START = "AutoStart"
        +const String INIT_CAN_BAUD = "CanBaud"
        +const String INIT_FILTER_MODE = "FilterMode"
        +const String INIT_FILTER_ACN = "FilterACn"
        +const String INIT_FILTER_AMN = "FilterAMn"
        +NVMInterface()
        +virtual ~NVMInterface()
        +virtual bool begin() = 0
        +virtual bool end() = 0
        +virtual bool save(const String &name, int32_t value) = 0
        +virtual bool save(const String &name, const String &value) = 0
        +virtual uint32_t readInt(const String &name) = 0
        +virtual String readString(const String &name) = 0
        +virtual bool clearEntries() = 0
    }

    Lawicel *--> SerialInterface : <<interface>>
    Lawicel *--> CANInterface : <<interface>>
    Lawicel *--> NVMInterface : <<interface>>
}

Class SerialAdapter{
    +SerialAdapter() : SerialInterface()
    -long m_baudrate
    -String currentCommand
}

Class CANAdapter{
    +CANAdapter() : CANInterface()
    -uint32_t m_baudRate
    -BUS_STATE m_currentState
    -ESP32SJA1000Class &m_Can_Controller
}

Class NVMAdapter{
    +const String DIRECTORY = "Startup"
    +NVMAdapter() : NVMInterface()
}

Class WebSocketAdapter{
    -WSAdapter() : SerialInterface()
}

NVMInterface *.down. NVMAdapter : <<realize>>
SerialInterface *.down. SerialAdapter : <<realize>>
CANInterface *.down. CANAdapter : <<realize>>
SerialInterface *.down. WebSocketAdapter : <<realize>>

package Espressif_ESP32_Library{
    Class Settings{
        -Preferences flashMemory
    }
}

NVMAdapter o.. Settings

package Arduino_Library{
    Class Arduino
    Arduino  <.up. SerialAdapter
}

package CAN_Library <<Folder>>{
    Class CAN
    Class ESP32SJA1000{
        +begin(long baudrate)
        +beginPacket(id,dlc,rtr)
        +beginExtendedPacket(id,dlc,rtr)
        +write(char* buffer,int length)
        +endPacket()
        +parsePacket()
        +onReceive()
        +packetId()
        +packetExtended()
        +packetDLC()
        +packetRTR()
        +available()
        +read()
        +filter(id,mask)
        +filterExtended(id,mask)
        +end()
    }
    Class CANController
    CAN  .up.o CANAdapter
    ESP32SJA1000  .up.o CAN
    CANController  .up.o ESP32SJA1000
    Arduino <.up. CANController
}

package AsyncWebServer_Library <<Folder>>{
    class AsyncWebServer
    class AsyncWebSocket

    AsyncWebSocket <.. AsyncWebServer
}

WebSocketAdapter o.. AsyncWebSocket


@enduml
